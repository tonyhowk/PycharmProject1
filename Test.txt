def getParkingRate(hour, minute):

    parkingRate = 0

    ## 从这开始编写 ---------------------> (1)这
    parking_time = hour * 60 + minute

    if parking_time <= 10:
        parkingRate = 0
    elif parking_time > 10 and parking_time <= 30:
        parkingRate = 1000
    elif parking_time > 30:
        parkingRate = int(1000 + (parking_time - 30)/10*300)
        if parkingRate > 5000:
            parkingRate = 5000
   ## <------------------------ 编写到此(1)

    return parkingRate
def getMaxNumber(inputData):

    findingNumber = {"number":0, "count":0}

    ## 从这开始编写 ---------------------> (1)
    for item in inputData:
        try:
            if type(int(item)) == int:
                if inputData.count(item) > findingNumber["count"]:
                    findingNumber["number"] = item
                    findingNumber["count"] = inputData.count(item)
                elif inputData.count(item) == findingNumber["count"]:
                    if int(item) < int(findingNumber["number"]):
                        findingNumber["number"] = item
                        findingNumber["count"] = inputData.count(item)
        except:
            pass
    ## <------------------------ 编写到此(1)

    return findingNumber
def getMileageCardUseAmt(cardUseInfo):

    mileageCardUseAmt = 0

    ## 从这开始编写 ---------------------> (1)

    for item in cardUseInfo:
        if item[2] == 'Y':
            mileageCardUseAmt += int(item[1])

    mileageCardUseAmt = round(mileageCardUseAmt/1000)*1000
    ## <------------------------ 编写到此(1)s

    return mileageCardUseAmt
def getMileageAmt(cardUseInfo, prevMonthCardUseAmt):

    mileageAmt = 0

    ## 从这开始编写 ---------------------> (2)

    thisMonthCardUseAmt = getMileageCardUseAmt(cardUseInfo)

    if prevMonthCardUseAmt < 500000:
        mileageAmt = thisMonthCardUseAmt // 1000
    elif prevMonthCardUseAmt < 2000000:
        mileageAmt = thisMonthCardUseAmt // 1000 * 2
    else:
        mileageAmt = thisMonthCardUseAmt // 1000 * 4

    ## <------------------------ 编写到此(2)

    return mileageAmt
def removeAddress(inputData):

    addressList = []

    ## 从这开始编写 ---------------------> (1)
    import re
    name_pattern = r"^[a-z0-9_.]+$"
    phone_pattern = r"^010-\d{4}-\d{4}$"

    name_re = re.compile(name_pattern)
    phone_re = re.compile(phone_pattern)

    name_ok_list = []

    for people in inputData:
        for key, value in people.items():
            if key == 'name':
                result = name_re.fullmatch(value)
                if result:
                    name_ok_list.append(people)

    for people in name_ok_list:
        for key, value in people.items():
            if key == 'phone':
                phone_check = []
                for item in value:
                    result = phone_re.fullmatch(item)
                    if result:
                        phone_check.append('Y')
                    else:
                        phone_check.append('N')
                if 'N' not in phone_check:
                    addressList.append(people)


    ## <------------------------ 编写到此(1)

    return addressList
def mergeAddress(addressList):

    mergedAddressList = []

    ## 从这开始编写 ---------------------> (2)
    names = []

    for people in addressList:
        for key, value in people.items():
            if key == 'name':
                names.append(value)

    names = list(set(names))

    tempAddressList = []
    for name in names:
        people_dic = {}
        people_dic['name'] = name
        people_dic['phone'] = []
        people_dic['email'] = []
        for people in addressList:
            if name in people.values():
                people_dic['phone'] = people_dic['phone'] + people['phone']
                people_dic['email'] = people_dic['email'] + people['email']

        tempAddressList.append(people_dic)

    for people in tempAddressList:
        people['phone'] = sorted(list(set(people['phone'])))
        people['email'] = sorted(list(set(people['email'])), key=lambda x: x.split('@')[0])

    # print(tempAddressList)
    tempAddressList = sorted(tempAddressList, key=lambda x: x['name'])
    mergedAddressList = tempAddressList
    # print(mergedAddressList)

    ## <------------------------ 编写到此(2)

    return mergedAddressList

